#!/usr/bin/env node

(() => {
    const fs = require('fs');
    const path = require('path');
    const pkg = require('./package.json');
    const ver = pkg.version;

    const run = (comm, args) => {
        const {
            spawn
        } = require('child_process');
        const command = spawn(comm, args);

        command.stdout.on('data', data => {
            console.log(`${data}`);
        });

        command.stderr.on('data', data => {
            console.error(`${data}`);
        });

        command.on('close', code => {
            if (code !== 0) {
                console.log(`child process exited with code ${code}`);
            }
        });
    };

    const srcDir = './src/';
    const buildDir = './build/';
    const distDir = './dist/';
    const command = process.argv[2];
    const args = process.argv.slice(3);
    if (!command) {
        console.log('run start|build|dist|clean');
    } else if (command === 'dist') {
        if (args.length === 0) {
            const mods = fs.readdirSync(srcDir).filter(item => fs.statSync(path.join(srcDir, item)).isDirectory());
            mods.map(async mod => {
                await run('parcel', [
                    'build', '--no-source-maps',
                    '-d', `${distDir}${ver}/`,
                    '-o', `azui.${mod}.min.js`,
                    `${srcDir}/${mod}/index.js`
                ]);
            });
        } else {
            const mod = args[0];
            run('parcel', ['build', '--no-source-maps',
                '-d', `${distDir}${ver}/`,
                '-o', `azui.${mod}.min.js`,
                `${srcDir}/${mod}/index.js`
            ]);
        }
    } else if (command === 'build') {
        if (args.length === 0) {
            // const mods = fs.readdirSync(dir).filter(item => fs.existsSync(path.join(dir, item, `${item}.html`)));
            const mods = fs.readdirSync(srcDir).filter(item => fs.statSync(path.join(srcDir, item)).isDirectory());
            mods.map(async mod => {
                const htmls = fs.readdirSync(path.join(srcDir, mod)).filter(item => item.toLowerCase().endsWith('.html') && fs.statSync(path.join(srcDir, mod, item)).isFile());
                htmls.map(async html => {
                    // console.log(html);
                    await run('parcel', ['build',
                        // '--no-minify',
                        '--no-source-maps',
                        '-d', `${buildDir}${ver}/`, '--public-url', './', `${srcDir}${mod}/${html}`
                    ]);
                });
            });
        } else {
            const mod = args[0];
            const htmls = fs.readdirSync(path.join(srcDir, mod)).filter(item => item.toLowerCase().endsWith('.html') && fs.statSync(path.join(srcDir, mod, item)).isFile());
            htmls.map(async html => {
                // console.log(html);
                await run('parcel', ['build',
                    // '--no-minify',
                    '--no-source-maps',
                    '-d', `${buildDir}${ver}/`,
                    '--public-url', './',
                    `${srcDir}/${mod}/${html}`
                ]);
            });

        }
    } else if (command === 'start') {
        const mod = args[0];
        const html = args[1] || mod;
        run('parcel', ['serve', '-d', 'dev', `${srcDir}/${mod}/${html}.html`]);
    } else if (command === 'clean') {
        if (args.length === 0) {
            run('rm', ['-rf', `${distDir}${ver}/`, `.cache/`]);
        } else if (args[0] === 'all') {
            run('rm', ['-rf', `${distDir}`, `./.cache/`, `${buildDir}`, `./dev/`]);
        }
    }
})();